{
  "openapi": "3.0.0",
  "paths": {
    "/api/users/addresses/{id}": {
      "get": {
        "operationId": "UserAddressController_findById",
        "summary": "Retrieve a address by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned address.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Address does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's addresses"],
        "security": [{ "cookie": [] }]
      },
      "put": {
        "operationId": "UserAddressController_removeAddress",
        "summary": "Update an existing address.",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
        "responses": {
          "204": { "description": "The address has been successfully updated." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Address does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's addresses"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/users/addresses": {
      "post": {
        "operationId": "UserAddressController_create",
        "summary": "Create a new address.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateAddressDto" } } }
        },
        "responses": {
          "201": {
            "description": "The address has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's addresses"],
        "security": [{ "cookie": [] }]
      },
      "get": {
        "operationId": "UserAddressController_list",
        "summary": "Retrieve a list of addresses.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of addresses.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's addresses"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/partner/addresses/{id}": {
      "get": {
        "operationId": "PartnerAddressController_findById",
        "summary": "Retrieve a address by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned address.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Address does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's addresses"],
        "security": [{ "cookie": [] }]
      },
      "put": {
        "operationId": "PartnerAddressController_removeAddress",
        "summary": "Update an existing address.",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
        "responses": {
          "204": { "description": "The address has been successfully updated." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Address does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's addresses"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/partner/addresses": {
      "post": {
        "operationId": "PartnerAddressController_create",
        "summary": "Create a new address.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateAddressDto" } } }
        },
        "responses": {
          "201": {
            "description": "The address has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's addresses"],
        "security": [{ "cookie": [] }]
      },
      "get": {
        "operationId": "PartnerAddressController_list",
        "summary": "Retrieve a list of addresses.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of addresses.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's addresses"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/auth/register/partner": {
      "post": {
        "operationId": "AuthController_registerAsPartner",
        "summary": "Create a new partner.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RegisterAsPartnerDto" } } }
        },
        "responses": {
          "201": {
            "description": "The partner has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Auth"]
      }
    },
    "/api/auth/register/user": {
      "post": {
        "operationId": "AuthController_registerAsUser",
        "summary": "Create a new user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RegisterAsUserDto" } } }
        },
        "responses": {
          "201": {
            "description": "The user has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Auth"]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "summary": "Store auth token in cookies.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LoginDto" } } }
        },
        "responses": {
          "204": { "description": "Auth token successfully received as cookie." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "401": {
            "description": "Invalid credentials.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Auth"]
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "summary": "Remove auth token from cookies.",
        "parameters": [],
        "responses": {
          "204": { "description": "Auth token successfully removed from cookies." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Auth"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/restaurants/{id}": {
      "get": {
        "operationId": "RestaurantController_findById",
        "summary": "Retrieve a restaurant by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned restaurant.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestaurantDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Restaurant does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Restaurants"]
      }
    },
    "/api/restaurants": {
      "get": {
        "operationId": "RestaurantController_list",
        "summary": "Retrieve a list of restaurants.",
        "parameters": [
          {
            "name": "city",
            "required": false,
            "in": "query",
            "schema": { "$ref": "#/components/schemas/QOperationalCityEnum" }
          },
          {
            "name": "cuisineType",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QCuisineTypeEnum" } }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QRestaurantTagEnum" } }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of restaurants.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestaurantListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Restaurants"]
      }
    },
    "/api/partner/profile": {
      "get": {
        "operationId": "PartnerProfileController_findById",
        "summary": "Retrieve a profile by id.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully returned profile.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PartnerProfileDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Profile does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's profile"],
        "security": [{ "cookie": [] }]
      },
      "put": {
        "operationId": "PartnerProfileController_update",
        "summary": "Update an existing profile.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdatePartnerProfileDto" } } }
        },
        "responses": {
          "204": { "description": "The profile has been successfully updated." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Profile does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's profile"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/restaurants/{restaurantId}/dishes": {
      "get": {
        "operationId": "RestaurantDishController_list",
        "summary": "Retrieve a list of dishes.",
        "parameters": [
          {
            "name": "restaurantId",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          },
          {
            "name": "city",
            "required": false,
            "in": "query",
            "schema": { "$ref": "#/components/schemas/QOperationalCityEnum" }
          },
          {
            "name": "cuisineType",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QCuisineTypeEnum" } }
          },
          {
            "name": "mealType",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QMealTypeEnum" } }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QDishTagsEnum" } }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of dishes.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Restaurant's dishes"]
      }
    },
    "/api/partner/dishes": {
      "get": {
        "operationId": "PartnerDishController_list",
        "summary": "Retrieve a list of dishes.",
        "parameters": [
          {
            "name": "city",
            "required": false,
            "in": "query",
            "schema": { "$ref": "#/components/schemas/QOperationalCityEnum" }
          },
          {
            "name": "cuisineType",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QCuisineTypeEnum" } }
          },
          {
            "name": "mealType",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QMealTypeEnum" } }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QDishTagsEnum" } }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of dishes.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's dishes"],
        "security": [{ "cookie": [] }]
      },
      "post": {
        "operationId": "PartnerDishController_create",
        "summary": "Create a new dish.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateDishDto" } } }
        },
        "responses": {
          "201": {
            "description": "The dish has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's dishes"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/partner/dishes/{id}": {
      "put": {
        "operationId": "PartnerDishController_update",
        "summary": "Update an existing dish.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDishDto" } } }
        },
        "responses": {
          "200": {
            "description": "The dish has been successfully updated.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Dish does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's dishes"],
        "security": [{ "cookie": [] }]
      },
      "delete": {
        "operationId": "PartnerDishController_deleteOne",
        "summary": "Delete a dish.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "204": { "description": "The dish has been successfully deleted." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Dish does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's dishes"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/dishes/{id}": {
      "get": {
        "operationId": "DishController_findDishById",
        "summary": "Retrieve a dish by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned dish.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Dish does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Dishes"]
      }
    },
    "/api/dishes": {
      "get": {
        "operationId": "DishController_listAllDishes",
        "summary": "Retrieve a list of dishes.",
        "parameters": [
          {
            "name": "city",
            "required": false,
            "in": "query",
            "schema": { "$ref": "#/components/schemas/QOperationalCityEnum" }
          },
          {
            "name": "cuisineType",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QCuisineTypeEnum" } }
          },
          {
            "name": "mealType",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QMealTypeEnum" } }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "$ref": "#/components/schemas/QDishTagsEnum" } }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of dishes.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Dishes"]
      }
    },
    "/api/users/profile": {
      "get": {
        "operationId": "UsersController_findById",
        "summary": "Retrieve a user by id.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully returned user.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "User does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Users's profile"],
        "security": [{ "cookie": [] }]
      },
      "put": {
        "operationId": "UsersController_update",
        "summary": "Update an existing user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserDto" } } }
        },
        "responses": {
          "204": { "description": "The user has been successfully updated." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "User does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Users's profile"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/users/favourite/restaurants/{id}": {
      "put": {
        "operationId": "FavouriteRestaurantsController_add",
        "summary": "Update an existing restaurant.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "The restaurant has been successfully updated.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FavouriteRestaurantDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Restaurant does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's favourite restaurants"],
        "security": [{ "cookie": [] }]
      },
      "delete": {
        "operationId": "FavouriteRestaurantsController_remove",
        "summary": "Delete a restaurant.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "204": { "description": "The restaurant has been successfully deleted." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Restaurant does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's favourite restaurants"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/users/favourite/restaurants": {
      "get": {
        "operationId": "FavouriteRestaurantsController_list",
        "summary": "Retrieve a list of restaurants.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of restaurants.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FavouriteRestaurantListDto" } }
            }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's favourite restaurants"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/users/favourite/dishes": {
      "get": {
        "operationId": "FavouriteDishesController_list",
        "summary": "Retrieve a list of dishes.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of dishes.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FavouriteDishListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's favourite dishes"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/users/favourite/dishes/{id}": {
      "put": {
        "operationId": "FavouriteDishesController_add",
        "summary": "Update an existing dish.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "The dish has been successfully updated.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FavouriteDishDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Dish does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's favourite dishes"],
        "security": [{ "cookie": [] }]
      },
      "delete": {
        "operationId": "FavouriteDishesController_remove",
        "summary": "Delete a dish.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "204": { "description": "The dish has been successfully deleted." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Dish does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's favourite dishes"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/orders": {
      "post": {
        "operationId": "OrderController_create",
        "summary": "Create a new order.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateOrderDto" } } }
        },
        "responses": {
          "201": {
            "description": "The order has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Orders"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/img/{type}/{id}": {
      "get": {
        "operationId": "ImageController_getImg",
        "summary": "Retrieve a image by id.",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "enum": ["restaurant", "dish"] }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned image.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StreamableFile" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Image does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Images"]
      }
    },
    "/api/img/upload-restaurant": {
      "put": {
        "operationId": "ImageController_uploadLogo",
        "summary": "Update an existing logo.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": { "type": "object", "properties": { "file": { "type": "string", "format": "binary" } } }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The logo has been successfully updated.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UploadedImageDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Logo does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Images"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/img/upload-dish/{dishId}": {
      "put": {
        "operationId": "ImageController_uploadPhoto",
        "summary": "Update an existing photo.",
        "parameters": [
          {
            "name": "dishId",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": { "type": "object", "properties": { "file": { "type": "string", "format": "binary" } } }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The photo has been successfully updated.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UploadedImageDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Photo does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Images"],
        "security": [{ "cookie": [] }]
      }
    }
  },
  "info": {
    "title": "JeszCoChcesz API 🍲🍝🍜",
    "description": "JeszCoChcesz is an online food delivery system connecting restaurants with health-conscious users.",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [
    { "name": "Partner's addresses", "description": "Operations on partner's addresses" },
    { "name": "User's addresses", "description": "Operations on user's addresses" },
    { "name": "Restaurants", "description": "Operations on restaurants" },
    { "name": "Dishes", "description": "Operations on dishes" },
    { "name": "Partner's dishes", "description": "Operations on partner's dishes" },
    { "name": "Restaurant's dishes", "description": "Operations on restaurant's dishes" },
    { "name": "Partner's profile", "description": "Operations on partner's profile" },
    { "name": "Users's profile", "description": "Operations on user's profile" },
    { "name": "Auth", "description": "Operations about authentication and registration" },
    { "name": "User's favourite dishes", "description": "Operations on user's favourite dishes" },
    { "name": "User's favourite restaurants", "description": "Operations on user's favourite restaurants" },
    { "name": "Images", "description": "Operations on images" },
    { "name": "Orders", "description": "Submitting an order" }
  ],
  "servers": [],
  "components": {
    "securitySchemes": { "cookie": { "type": "apiKey", "in": "cookie", "name": "access_token" } },
    "schemas": {
      "DefaultResponseDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "status": { "type": "string" },
          "path": { "type": "string" },
          "message": { "type": "string" }
        },
        "required": ["name", "status", "path"]
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "street": { "type": "string", "example": "Street" },
          "streetNumber": { "type": "string", "pattern": "^\\d+[A-Za-z]?$", "maxLength": 4, "example": "1A" },
          "apartmentNumber": { "type": "string", "pattern": "^\\d{1,3}$", "example": "1" },
          "floor": { "type": "string", "pattern": "^\\d{0,2}$", "example": "1" },
          "city": { "type": "string", "example": "City" },
          "postcode": { "type": "string", "pattern": "^\\d{2}-\\d{3}$", "example": "00-000" }
        },
        "required": ["id", "street", "streetNumber", "city", "postcode"]
      },
      "ErrorDetailsDto": {
        "type": "object",
        "properties": {
          "path": { "type": "string" },
          "message": { "type": "string" },
          "errorCode": { "type": "string" }
        },
        "required": ["path", "message", "errorCode"]
      },
      "ValidationErrorDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "status": { "type": "string" },
          "path": { "type": "string" },
          "message": { "type": "string" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ErrorDetailsDto" } }
        },
        "required": ["name", "status", "path"]
      },
      "CreateAddressDto": {
        "type": "object",
        "properties": {
          "street": { "type": "string", "example": "Street" },
          "streetNumber": { "type": "string", "pattern": "^\\d+[A-Za-z]?$", "maxLength": 4, "example": "1A" },
          "apartmentNumber": { "type": "string", "pattern": "^\\d{1,3}$", "example": "1" },
          "floor": { "type": "string", "pattern": "^\\d{0,2}$", "example": "1" },
          "city": { "type": "string", "example": "City" },
          "postcode": { "type": "string", "pattern": "^\\d{2}-\\d{3}$", "example": "00-000" }
        },
        "required": ["street", "streetNumber", "city", "postcode"]
      },
      "AddressListDto": {
        "type": "object",
        "properties": {
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/AddressDto" } },
          "pages": { "type": "number" }
        },
        "required": ["data", "pages"]
      },
      "RegisterAsPartnerDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 64,
            "example": "partner@email.com",
            "description": "RFC 5322 standard email format"
          },
          "password": {
            "type": "string",
            "format": "password",
            "maxLength": 64,
            "example": "Password1",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "format": "phoneNumber",
            "maxLength": 14,
            "example": "800500300",
            "description": ""
          },
          "nip": {
            "type": "string",
            "format": "nip",
            "maxLength": 10,
            "example": "1234563218",
            "description": "Polish NIP number"
          }
        },
        "required": ["email", "password", "phoneNumber", "nip"]
      },
      "RegisterAsUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 64,
            "example": "user@email.com",
            "description": "RFC 5322 standard email format"
          },
          "password": {
            "type": "string",
            "format": "password",
            "maxLength": 64,
            "example": "Password1",
            "description": ""
          }
        },
        "required": ["email", "password"]
      },
      "Role": { "type": "string", "enum": ["Partner", "User"] },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 64,
            "example": "user@email.com",
            "description": "RFC 5322 standard email format"
          },
          "role": { "$ref": "#/components/schemas/Role" },
          "password": {
            "type": "string",
            "format": "password",
            "maxLength": 64,
            "example": "Password1",
            "description": ""
          },
          "rememberMe": { "type": "boolean" }
        },
        "required": ["email", "role", "password", "rememberMe"]
      },
      "CuisineTypeEnum": {
        "type": "string",
        "enum": [
          "amerykańska",
          "azjatycka",
          "europejska",
          "arabska",
          "chińska",
          "francuska",
          "gruzińska",
          "grecka",
          "indyjska",
          "włoska",
          "japońska",
          "żydowska",
          "koreańska",
          "libańska",
          "śródziemnomorska",
          "meksykańska",
          "polska",
          "tajska",
          "turecka",
          "wietnamska"
        ]
      },
      "RestaurantTagEnum": {
        "type": "string",
        "enum": [
          "fast food",
          "wegańska",
          "wegetariańska",
          "kawiarnia",
          "zdrowa",
          "street food",
          "desery",
          "pizza",
          "burgery",
          "sushi",
          "kebab",
          "gluten free"
        ]
      },
      "OperationalCityEnum": {
        "type": "string",
        "enum": [
          "Białystok",
          "Bydgoszcz",
          "Gdańsk",
          "Gorzów Wielkopolski",
          "Katowice",
          "Kielce",
          "Kraków",
          "Lublin",
          "Łódź",
          "Olsztyn",
          "Opole",
          "Poznań",
          "Rzeszów",
          "Szczecin",
          "Toruń",
          "Warszawa",
          "Wrocław",
          "Zielona Góra"
        ]
      },
      "RestaurantDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "minLength": 1, "maxLength": 50, "example": "Resto bar" },
          "description": { "type": "string", "maxLength": 500, "example": "Opis restauracji." },
          "cuisineType": {
            "type": "array",
            "example": ["włoska"],
            "items": { "$ref": "#/components/schemas/CuisineTypeEnum" }
          },
          "tags": {
            "type": "array",
            "example": ["pizza", "zdrowa"],
            "items": { "$ref": "#/components/schemas/RestaurantTagEnum" }
          },
          "addressId": { "type": "array", "items": { "$ref": "#/components/schemas/AddressDto" } },
          "operationalCities": {
            "type": "array",
            "example": ["Wrocław"],
            "items": { "$ref": "#/components/schemas/OperationalCityEnum" }
          },
          "logo": {
            "type": "string",
            "pattern": "\\/api\\/img\\/(restaurant|dish)\\/[0-9a-fA-F]{24}$",
            "example": "https://coderscamp2021-hk-fullstack.herokuapp.com/api/img/restaurant/6200218668fc82e7bdf15088"
          }
        },
        "required": ["id", "name", "description", "cuisineType", "tags", "addressId", "operationalCities"]
      },
      "QOperationalCityEnum": { "type": "string" },
      "QCuisineTypeEnum": { "type": "string" },
      "QRestaurantTagEnum": { "type": "string" },
      "RestaurantListDto": {
        "type": "object",
        "properties": {
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/RestaurantDto" } },
          "pages": { "type": "number" }
        },
        "required": ["data", "pages"]
      },
      "PartnerProfileDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "minLength": 1, "maxLength": 50, "example": "Resto bar" },
          "description": { "type": "string", "maxLength": 500, "example": "Opis restauracji." },
          "cuisineType": {
            "type": "array",
            "example": ["włoska"],
            "items": { "$ref": "#/components/schemas/CuisineTypeEnum" }
          },
          "tags": {
            "type": "array",
            "example": ["pizza", "zdrowa"],
            "items": { "$ref": "#/components/schemas/RestaurantTagEnum" }
          },
          "operationalCities": {
            "type": "array",
            "example": ["Wrocław"],
            "items": { "$ref": "#/components/schemas/OperationalCityEnum" }
          },
          "logo": {
            "type": "string",
            "pattern": "\\/api\\/img\\/(restaurant|dish)\\/[0-9a-fA-F]{24}$",
            "example": "https://coderscamp2021-hk-fullstack.herokuapp.com/api/img/restaurant/6200218668fc82e7bdf15088"
          },
          "bankAccountNumber": { "type": "string", "pattern": "^\\d{26}$", "example": "72920080748556126838146923" },
          "phoneNumber": {
            "type": "string",
            "format": "phoneNumber",
            "maxLength": 14,
            "example": "800500300",
            "description": ""
          }
        },
        "required": ["id", "cuisineType", "tags", "operationalCities"]
      },
      "UpdatePartnerProfileDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 1, "maxLength": 50, "example": "Resto bar" },
          "description": { "type": "string", "maxLength": 500, "example": "Opis restauracji." },
          "cuisineType": {
            "type": "array",
            "example": ["włoska"],
            "items": { "$ref": "#/components/schemas/CuisineTypeEnum" }
          },
          "tags": {
            "type": "array",
            "example": ["pizza", "zdrowa"],
            "items": { "$ref": "#/components/schemas/RestaurantTagEnum" }
          },
          "operationalCities": {
            "type": "array",
            "example": ["Wrocław"],
            "items": { "$ref": "#/components/schemas/OperationalCityEnum" }
          },
          "bankAccountNumber": { "type": "string", "pattern": "^\\d{26}$", "example": "72920080748556126838146923" },
          "phoneNumber": {
            "type": "string",
            "format": "phoneNumber",
            "maxLength": 14,
            "example": "800500300",
            "description": ""
          }
        },
        "required": ["cuisineType", "tags", "operationalCities"]
      },
      "QMealTypeEnum": { "type": "string" },
      "QDishTagsEnum": { "type": "string" },
      "MealTypeEnum": { "type": "string", "enum": ["śniadanie", "lunch", "obiad", "kolacja"] },
      "DishTagsEnum": {
        "type": "string",
        "enum": ["wegańska", "wegetariańska", "gluten free", "ostre", "bardzo ostre"]
      },
      "IngredientDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 1, "maxLength": 500, "example": "bazylia" },
          "canBeExcluded": { "type": "boolean", "default": false }
        },
        "required": ["name", "canBeExcluded"]
      },
      "AllergensEnum": {
        "type": "string",
        "enum": [
          "gluten",
          "skorupiaki",
          "jaja",
          "ryby",
          "orzechy",
          "soja",
          "mleko",
          "seler",
          "gorczyca",
          "nasiona sezamu",
          "dwutlenek siarki",
          "łubin",
          "mięczaki"
        ]
      },
      "NutritionalValueDto": {
        "type": "object",
        "properties": {
          "per100g": { "type": "number", "minimum": 0 },
          "perPortion": { "type": "number", "minimum": 0 }
        },
        "required": ["per100g", "perPortion"]
      },
      "DishDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "minLength": 1, "maxLength": 500, "example": "Danie 1" },
          "photo": {
            "type": "string",
            "pattern": "\\/api\\/img\\/(restaurant|dish)\\/[0-9a-fA-F]{24}$",
            "example": "https://coderscamp2021-hk-fullstack.herokuapp.com/api/img/restaurant/6200218668fc82e7bdf15088"
          },
          "mealType": {
            "type": "array",
            "example": ["lunch", "obiad"],
            "items": { "$ref": "#/components/schemas/MealTypeEnum" }
          },
          "description": { "type": "string", "example": "Opis dania" },
          "price": { "type": "number", "example": 2350 },
          "tags": {
            "type": "array",
            "example": ["ostre", "gluten free"],
            "items": { "$ref": "#/components/schemas/DishTagsEnum" }
          },
          "ingredients": { "type": "array", "items": { "$ref": "#/components/schemas/IngredientDto" } },
          "allergens": {
            "type": "array",
            "example": ["orzechy"],
            "items": { "$ref": "#/components/schemas/AllergensEnum" }
          },
          "portionWeight": { "type": "number", "minimum": 0 },
          "calories": { "$ref": "#/components/schemas/NutritionalValueDto" },
          "fats": { "$ref": "#/components/schemas/NutritionalValueDto" },
          "proteins": { "$ref": "#/components/schemas/NutritionalValueDto" },
          "carbohydrates": { "$ref": "#/components/schemas/NutritionalValueDto" },
          "restaurant": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
        },
        "required": [
          "id",
          "name",
          "price",
          "portionWeight",
          "calories",
          "fats",
          "proteins",
          "carbohydrates",
          "restaurant"
        ]
      },
      "DishListDto": {
        "type": "object",
        "properties": {
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/DishDto" } },
          "pages": { "type": "number" }
        },
        "required": ["data", "pages"]
      },
      "CreateDishDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 1, "maxLength": 500, "example": "Danie 1" },
          "mealType": {
            "type": "array",
            "example": ["lunch", "obiad"],
            "items": { "$ref": "#/components/schemas/MealTypeEnum" }
          },
          "description": { "type": "string", "example": "Opis dania" },
          "price": { "type": "number", "example": 2350 },
          "tags": {
            "type": "array",
            "example": ["ostre", "gluten free"],
            "items": { "$ref": "#/components/schemas/DishTagsEnum" }
          },
          "ingredients": { "type": "array", "items": { "$ref": "#/components/schemas/IngredientDto" } },
          "allergens": {
            "type": "array",
            "example": ["orzechy"],
            "items": { "$ref": "#/components/schemas/AllergensEnum" }
          },
          "portionWeight": { "type": "number", "minimum": 0 },
          "calories": { "$ref": "#/components/schemas/NutritionalValueDto" },
          "fats": { "$ref": "#/components/schemas/NutritionalValueDto" },
          "proteins": { "$ref": "#/components/schemas/NutritionalValueDto" },
          "carbohydrates": { "$ref": "#/components/schemas/NutritionalValueDto" }
        },
        "required": ["name", "price", "portionWeight", "calories", "fats", "proteins", "carbohydrates"]
      },
      "UpdateDishDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 1, "maxLength": 500, "example": "Danie 1" },
          "mealType": {
            "type": "array",
            "example": ["lunch", "obiad"],
            "items": { "$ref": "#/components/schemas/MealTypeEnum" }
          },
          "description": { "type": "string", "example": "Opis dania" },
          "price": { "type": "number", "example": 2350 },
          "tags": {
            "type": "array",
            "example": ["ostre", "gluten free"],
            "items": { "$ref": "#/components/schemas/DishTagsEnum" }
          },
          "ingredients": { "type": "array", "items": { "$ref": "#/components/schemas/IngredientDto" } },
          "allergens": {
            "type": "array",
            "example": ["orzechy"],
            "items": { "$ref": "#/components/schemas/AllergensEnum" }
          },
          "portionWeight": { "type": "number", "minimum": 0 },
          "calories": { "$ref": "#/components/schemas/NutritionalValueDto" },
          "fats": { "$ref": "#/components/schemas/NutritionalValueDto" },
          "proteins": { "$ref": "#/components/schemas/NutritionalValueDto" },
          "carbohydrates": { "$ref": "#/components/schemas/NutritionalValueDto" }
        },
        "required": ["name", "price", "portionWeight", "calories", "fats", "proteins", "carbohydrates"]
      },
      "CardDto": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "pattern": "^(?:4[0-9]{12}(?:[0-9]{3})?)|(?:3[47][0-9]{13})|(?:5[1-5][0-9]{14})|(?:6(?:011|5[0-9][0-9])[0-9]{12})|(?:(?:2131|1800|35\\d{3})\\d{11})|(?:3(?:0[0-5]|[68][0-9])[0-9]{11})$",
            "example": "4562574783836030"
          },
          "expirationDate": {
            "type": "string",
            "pattern": "([0-9]{4})-(?:[0-9]{2})-([0-9]{2})",
            "example": "2022-10-12"
          },
          "securityCode": { "type": "string", "minLength": 3, "maxLength": 4, "example": "722" }
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "minLength": 3, "maxLength": 35, "example": "Jan" },
          "surname": { "type": "string", "minLength": 3, "maxLength": 35, "example": "Kowalski" },
          "phoneNumber": {
            "type": "string",
            "format": "phoneNumber",
            "maxLength": 14,
            "example": "800500300",
            "description": ""
          },
          "card": { "$ref": "#/components/schemas/CardDto" }
        },
        "required": ["id"]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 3, "maxLength": 35, "example": "Jan" },
          "surname": { "type": "string", "minLength": 3, "maxLength": 35, "example": "Kowalski" },
          "phoneNumber": {
            "type": "string",
            "format": "phoneNumber",
            "maxLength": 14,
            "example": "800500300",
            "description": ""
          },
          "card": { "$ref": "#/components/schemas/CardDto" }
        }
      },
      "FavouriteRestaurantDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "minLength": 1, "maxLength": 50, "example": "Resto bar" }
        },
        "required": ["id", "name"]
      },
      "FavouriteRestaurantListDto": {
        "type": "object",
        "properties": {
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/FavouriteRestaurantDto" } },
          "pages": { "type": "number" }
        },
        "required": ["data", "pages"]
      },
      "FavouriteDishDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "minLength": 1, "maxLength": 500, "example": "Danie 1" },
          "restaurant": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
        },
        "required": ["id", "name", "restaurant"]
      },
      "FavouriteDishListDto": {
        "type": "object",
        "properties": {
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/FavouriteDishDto" } },
          "pages": { "type": "number" }
        },
        "required": ["data", "pages"]
      },
      "OrderDishDto": {
        "type": "object",
        "properties": {
          "dishId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "count": { "type": "number", "minimum": 1 },
          "excludedIngredients": { "example": [], "type": "array", "items": { "type": "string" } }
        },
        "required": ["dishId"]
      },
      "SubOrderDto": {
        "type": "object",
        "properties": {
          "deliveryDate": { "format": "date-time", "type": "string" },
          "dishes": { "type": "array", "items": { "$ref": "#/components/schemas/OrderDishDto" } }
        },
        "required": ["deliveryDate", "dishes"]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "addressId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "hourStart": { "type": "number", "example": 8, "minimum": 0, "maximum": 23 },
          "hourEnd": { "type": "number", "example": 11, "minimum": 0, "maximum": 23 },
          "subOrders": { "type": "array", "items": { "$ref": "#/components/schemas/SubOrderDto" } },
          "comment": { "type": "string", "maxLength": 300, "example": "Additional requests for the restaurant." }
        },
        "required": ["addressId", "hourStart", "hourEnd", "subOrders"]
      },
      "OrderDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "addressId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "userId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "hourStart": { "type": "number", "example": 8, "minimum": 0, "maximum": 23 },
          "hourEnd": { "type": "number", "example": 11, "minimum": 0, "maximum": 23 },
          "date": { "format": "date-time", "type": "string" },
          "subOrders": { "type": "array", "items": { "$ref": "#/components/schemas/SubOrderDto" } },
          "comment": { "type": "string", "maxLength": 300, "example": "Additional requests for the restaurant." }
        },
        "required": ["id", "addressId", "userId", "hourStart", "hourEnd", "date", "subOrders"]
      },
      "StreamableFile": { "type": "object", "properties": {} },
      "UploadedImageDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "pattern": "\\/api\\/img\\/(restaurant|dish)\\/[0-9a-fA-F]{24}$",
            "example": "https://coderscamp2021-hk-fullstack.herokuapp.com/api/img/restaurant/6200218668fc82e7bdf15088"
          }
        },
        "required": ["url"]
      }
    }
  },
  "externalDocs": {
    "description": "CodersCamp 2021 - Project Fullstack - GitHub",
    "url": "https://github.com/CodersCamp2021-HK/CodersCamp2021.Project.Fullstack"
  }
}
