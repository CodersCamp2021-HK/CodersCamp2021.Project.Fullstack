{
  "openapi": "3.0.0",
  "paths": {
    "/api/addresses/{id}": {
      "get": {
        "operationId": "AddressesController_findById",
        "summary": "Retrive a address by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned address.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Address does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Addresses"]
      }
    },
    "/api/addresses": {
      "post": {
        "operationId": "AddressesController_create",
        "summary": "Create a new address.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateAddressDto" } } }
        },
        "responses": {
          "201": {
            "description": "The address has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Addresses"]
      }
    },
    "/api/articles/{id}": {
      "get": {
        "operationId": "ArticlesController_findById",
        "summary": "Retrive a article by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned article.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ArticleDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Article does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Articles"]
      },
      "put": {
        "operationId": "ArticlesController_update",
        "summary": "Update an existing article.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateArticleDto" } } }
        },
        "responses": {
          "204": { "description": "The article has been successfully updated." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Article does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Articles"]
      },
      "delete": {
        "operationId": "ArticlesController_deleteOne",
        "summary": "Delete a article.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "204": { "description": "The article has been successfully deleted." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Article does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Articles"]
      }
    },
    "/api/articles": {
      "get": {
        "operationId": "ArticlesController_list",
        "summary": "Retrive a list of articles.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of articles.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ArticleListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Articles"]
      },
      "post": {
        "operationId": "ArticlesController_create",
        "summary": "Create a new article.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateArticleDto" } } }
        },
        "responses": {
          "201": {
            "description": "The article has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ArticleDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Articles"]
      }
    },
    "/api/auth/register/partner": {
      "post": {
        "operationId": "AuthController_registerAsPartner",
        "summary": "Create a new partner.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RegisterAsPartnerDto" } } }
        },
        "responses": {
          "201": {
            "description": "The partner has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Auth"]
      }
    },
    "/api/auth/register/user": {
      "post": {
        "operationId": "AuthController_registerAsUser",
        "summary": "Create a new user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RegisterAsUserDto" } } }
        },
        "responses": {
          "201": {
            "description": "The user has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Auth"]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "summary": "Store auth token in cookies.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LoginDto" } } }
        },
        "responses": {
          "204": { "description": "Auth token successfully received as cookie." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "401": {
            "description": "Invalid credentials.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Auth"]
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "summary": "Remove auth token from cookies.",
        "parameters": [],
        "responses": {
          "204": { "description": "Auth token successfully removed from cookies." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Auth"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/restaurants/{id}": {
      "get": {
        "operationId": "RestaurantController_findById",
        "summary": "Retrive a restaurant by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned restaurant.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestaurantDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Restaurant does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Restaurants"]
      }
    },
    "/api/restaurants": {
      "get": {
        "operationId": "RestaurantController_list",
        "summary": "Retrive a list of restaurants.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of restaurants.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestaurantListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Restaurants"]
      }
    },
    "/api/restaurants/{restaurantId}/dishes/{id}": {
      "get": {
        "operationId": "RestaurantDishController_findById",
        "summary": "Retrive a dish by id.",
        "parameters": [
          {
            "name": "restaurantId",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned dish.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Dish does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Restaurant's dishes"]
      }
    },
    "/api/restaurants/{restaurantId}/dishes": {
      "get": {
        "operationId": "RestaurantDishController_list",
        "summary": "Retrive a list of dishes.",
        "parameters": [
          {
            "name": "restaurantId",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of dishes.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Restaurant's dishes"]
      }
    },
    "/api/partner/dishes/{id}": {
      "get": {
        "operationId": "PartnerDishController_findById",
        "summary": "Retrive a dish by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned dish.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Dish does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's dishes"],
        "security": [{ "cookie": [] }]
      },
      "put": {
        "operationId": "PartnerDishController_update",
        "summary": "Update an existing dish.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDishDto" } } }
        },
        "responses": {
          "204": { "description": "The dish has been successfully updated." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Dish does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's dishes"],
        "security": [{ "cookie": [] }]
      },
      "delete": {
        "operationId": "PartnerDishController_deleteOne",
        "summary": "Delete a dish.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" }
          }
        ],
        "responses": {
          "204": { "description": "The dish has been successfully deleted." },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "404": { "description": "Dish does not exist." },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's dishes"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/partner/dishes": {
      "get": {
        "operationId": "PartnerDishController_list",
        "summary": "Retrive a list of dishes.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of dishes.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's dishes"],
        "security": [{ "cookie": [] }]
      },
      "post": {
        "operationId": "PartnerDishController_create",
        "summary": "Create a new dish.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateDishDto" } } }
        },
        "responses": {
          "201": {
            "description": "The dish has been successfully created.",
            "headers": { "Location": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DishDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["Partner's dishes"],
        "security": [{ "cookie": [] }]
      }
    },
    "/api/users/favourite/restaurants": {
      "get": {
        "operationId": "FavouriteRestaurantListController_list",
        "summary": "Retrive a list of restaurants.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of restaurants.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FavouriteRestaurantListDto" } }
            }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's favourite restaurants"]
      }
    },
    "/api/users/favourite/dishes": {
      "get": {
        "operationId": "FavouriteDishListController_list",
        "summary": "Retrive a list of dishes.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number", "minimum": 1 }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "default": 10, "type": "number", "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of dishes.",
            "headers": { "link": { "schema": { "type": "string" } } },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FavouriteDishListDto" } } }
          },
          "400": {
            "description": "Parameters are not valid or they are missing.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationErrorDto" } } }
          },
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DefaultResponseDto" } } }
          }
        },
        "tags": ["User's favourite dishes"]
      }
    }
  },
  "info": { "title": "App example", "description": "The app API description", "version": "1.0.0", "contact": {} },
  "tags": [
    { "name": "Addresses", "description": "Operations about addresses" },
    { "name": "Articles", "description": "Operations about articles" },
    { "name": "Restaurants", "description": "Operations on restaurants" },
    { "name": "Partner's dishes", "description": "Operations on partner's dishes" },
    { "name": "Restaurant's dishes", "description": "Operations on restaurant's dishes" },
    { "name": "User's favourite dishes", "description": "Operations on user's favourite dishes" },
    { "name": "User's favourite restaurants", "description": "Operations on user's favourite restaurants" },
    { "name": "Auth", "description": "Operations about authentication and registration" }
  ],
  "servers": [],
  "components": {
    "securitySchemes": { "cookie": { "type": "apiKey", "in": "cookie", "name": "access_token" } },
    "schemas": {
      "DefaultResponseDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "status": { "type": "string" },
          "path": { "type": "string" },
          "message": { "type": "string" }
        },
        "required": ["name", "status", "path"]
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "street": { "type": "string", "example": "Street" },
          "streetNumber": { "type": "string", "pattern": "^\\d+[A-Za-z]?$", "maxLength": 4, "example": "1A" },
          "apartmentNumber": { "type": "string", "pattern": "^\\d{1,3}$", "example": "1" },
          "floor": { "type": "string", "pattern": "^\\d{0,2}$", "example": "1" },
          "city": { "type": "string", "example": "City" },
          "postcode": { "type": "string", "pattern": "^\\d{2}-\\d{3}$", "example": "00-000" }
        },
        "required": ["id", "street", "streetNumber", "city", "postcode"]
      },
      "ErrorDetailsDto": {
        "type": "object",
        "properties": {
          "path": { "type": "string" },
          "message": { "type": "string" },
          "errorCode": { "type": "string" }
        },
        "required": ["path", "message", "errorCode"]
      },
      "ValidationErrorDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "status": { "type": "string" },
          "path": { "type": "string" },
          "message": { "type": "string" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ErrorDetailsDto" } }
        },
        "required": ["name", "status", "path"]
      },
      "CreateAddressDto": {
        "type": "object",
        "properties": {
          "street": { "type": "string", "example": "Street" },
          "streetNumber": { "type": "string", "pattern": "^\\d+[A-Za-z]?$", "maxLength": 4, "example": "1A" },
          "apartmentNumber": { "type": "string", "pattern": "^\\d{1,3}$", "example": "1" },
          "floor": { "type": "string", "pattern": "^\\d{0,2}$", "example": "1" },
          "city": { "type": "string", "example": "City" },
          "postcode": { "type": "string", "pattern": "^\\d{2}-\\d{3}$", "example": "00-000" }
        },
        "required": ["street", "streetNumber", "city", "postcode"]
      },
      "ArticleDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "title": { "type": "string", "minLength": 4, "maxLength": 256 },
          "content": { "type": "string", "minLength": 4, "maxLength": 32768 }
        },
        "required": ["id", "title", "content"]
      },
      "ArticleListDto": {
        "type": "object",
        "properties": {
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/ArticleDto" } },
          "pages": { "type": "number" }
        },
        "required": ["data", "pages"]
      },
      "CreateArticleDto": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "minLength": 4, "maxLength": 256 },
          "content": { "type": "string", "minLength": 4, "maxLength": 32768 }
        },
        "required": ["title", "content"]
      },
      "UpdateArticleDto": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "minLength": 4, "maxLength": 256 },
          "content": { "type": "string", "minLength": 4, "maxLength": 32768 }
        },
        "required": ["title", "content"]
      },
      "RegisterAsPartnerDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 64,
            "example": "user@email.com",
            "description": "RFC 5322 standard email format"
          },
          "password": {
            "type": "string",
            "format": "password",
            "maxLength": 64,
            "example": "Password1",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "format": "phoneNumber",
            "maxLength": 14,
            "example": "800500300",
            "description": ""
          },
          "nip": {
            "type": "string",
            "format": "nip",
            "maxLength": 10,
            "example": "1234563218",
            "description": "Polish NIP number"
          }
        },
        "required": ["email", "password", "phoneNumber", "nip"]
      },
      "RegisterAsUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 64,
            "example": "user@email.com",
            "description": "RFC 5322 standard email format"
          },
          "password": {
            "type": "string",
            "format": "password",
            "maxLength": 64,
            "example": "Password1",
            "description": ""
          }
        },
        "required": ["email", "password"]
      },
      "Role": { "type": "string", "enum": ["Partner", "User"] },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 64,
            "example": "user@email.com",
            "description": "RFC 5322 standard email format"
          },
          "role": { "$ref": "#/components/schemas/Role" },
          "password": {
            "type": "string",
            "format": "password",
            "maxLength": 64,
            "example": "Password1",
            "description": ""
          },
          "rememberMe": { "type": "boolean" }
        },
        "required": ["email", "role", "password", "rememberMe"]
      },
      "ShortenedDishDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "example": "Chilli con carne" },
          "photo": { "type": "string" },
          "description": {
            "type": "string",
            "example": "Składa się z soczewicy, świeżych pomidorów  i bazylii oraz kuminu"
          },
          "callories": { "type": "number" }
        },
        "required": ["id", "name", "photo", "description", "callories"]
      },
      "RestaurantDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "example": "Resto bar" },
          "type": { "type": "string", "example": "włoskie" },
          "tags": { "example": ["tradycyjna", "oryginalne składniki"], "type": "array", "items": { "type": "string" } },
          "photo": { "type": "string" },
          "dishes": { "type": "array", "items": { "$ref": "#/components/schemas/ShortenedDishDto" } }
        },
        "required": ["id", "name", "type", "tags", "photo", "dishes"]
      },
      "RestaurantWithoutDishesDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "example": "Resto bar" },
          "type": { "type": "string", "example": "włoskie" },
          "tags": { "example": ["tradycyjna", "oryginalne składniki"], "type": "array", "items": { "type": "string" } },
          "photo": { "type": "string" }
        },
        "required": ["id", "name", "type", "tags", "photo"]
      },
      "RestaurantListDto": {
        "type": "object",
        "properties": {
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/RestaurantWithoutDishesDto" } },
          "pages": { "type": "number" }
        },
        "required": ["data", "pages"]
      },
      "IngredientDto": {
        "type": "object",
        "properties": { "name": { "type": "string", "example": "bazylia" }, "canBeExcluded": { "type": "boolean" } },
        "required": ["name", "canBeExcluded"]
      },
      "DishDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "example": "Chilli con carne" },
          "photo": { "type": "string" },
          "description": {
            "type": "string",
            "example": "Składa się z soczewicy, świeżych pomidorów  i bazylii oraz kuminu"
          },
          "allergens": { "example": ["milk", "eggs", "wheat"], "type": "array", "items": { "type": "string" } },
          "callories": { "type": "number" },
          "nutritionalValue": { "type": "object", "example": { "fats": 20, "proteins": 16, "carbohydrates": 35 } },
          "ingredients": { "$ref": "#/components/schemas/IngredientDto" }
        },
        "required": ["id", "name", "photo", "description", "allergens", "callories", "nutritionalValue", "ingredients"]
      },
      "DishListDto": {
        "type": "object",
        "properties": {
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/DishDto" } },
          "pages": { "type": "number" }
        },
        "required": ["data", "pages"]
      },
      "CreateDishDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Chilli con carne" },
          "photo": { "type": "string" },
          "description": {
            "type": "string",
            "example": "Składa się z soczewicy, świeżych pomidorów  i bazylii oraz kuminu"
          },
          "allergens": { "example": ["milk", "eggs", "wheat"], "type": "array", "items": { "type": "string" } },
          "callories": { "type": "number" },
          "nutritionalValue": { "type": "object", "example": { "fats": 20, "proteins": 16, "carbohydrates": 35 } },
          "ingredients": { "$ref": "#/components/schemas/IngredientDto" }
        },
        "required": ["name", "photo", "description", "allergens", "callories", "nutritionalValue", "ingredients"]
      },
      "UpdateDishDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Chilli con carne" },
          "photo": { "type": "string" },
          "description": {
            "type": "string",
            "example": "Składa się z soczewicy, świeżych pomidorów  i bazylii oraz kuminu"
          },
          "allergens": { "example": ["milk", "eggs", "wheat"], "type": "array", "items": { "type": "string" } },
          "callories": { "type": "number" },
          "nutritionalValue": { "type": "object", "example": { "fats": 20, "proteins": 16, "carbohydrates": 35 } },
          "ingredients": { "$ref": "#/components/schemas/IngredientDto" }
        },
        "required": ["name", "photo", "description", "allergens", "callories", "nutritionalValue", "ingredients"]
      },
      "FavouriteRestaurantDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "example": "Resto bar" }
        },
        "required": ["id", "name"]
      },
      "FavouriteRestaurantListDto": {
        "type": "object",
        "properties": {
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/FavouriteRestaurantDto" } },
          "pages": { "type": "number" }
        },
        "required": ["data", "pages"]
      },
      "FavouriteDishDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$", "example": "6200218668fc82e7bdf15088" },
          "name": { "type": "string", "example": "Chilli con carne" }
        },
        "required": ["id", "name"]
      },
      "FavouriteDishListDto": {
        "type": "object",
        "properties": {
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/FavouriteDishDto" } },
          "pages": { "type": "number" }
        },
        "required": ["data", "pages"]
      }
    }
  }
}
