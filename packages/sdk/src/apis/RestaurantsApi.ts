/* tslint:disable */
/* eslint-disable */
/**
 * App example
 * The app API description
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  DefaultResponseDto,
  DefaultResponseDtoFromJSON,
  DefaultResponseDtoToJSON,
  RestaurantDto,
  RestaurantDtoFromJSON,
  RestaurantDtoToJSON,
  RestaurantListDto,
  RestaurantListDtoFromJSON,
  RestaurantListDtoToJSON,
  ValidationErrorDto,
  ValidationErrorDtoFromJSON,
  ValidationErrorDtoToJSON,
} from '../models';

export interface FindRestaurantByIdRequest {
  id: string;
}

export interface ListRestaurantsRequest {
  page?: number;
  limit?: number;
}

/**
 *
 */
export class RestaurantsApi extends runtime.BaseAPI {
  /**
   * Retrive a restaurant by id.
   */
  async findRestaurantByIdRaw(
    requestParameters: FindRestaurantByIdRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestaurantDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling findRestaurantById.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/restaurants/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestaurantDtoFromJSON(jsonValue));
  }

  /**
   * Retrive a restaurant by id.
   */
  async findRestaurantById(
    requestParameters: FindRestaurantByIdRequest,
    initOverrides?: RequestInit,
  ): Promise<RestaurantDto> {
    const response = await this.findRestaurantByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Retrive a list of restaurants.
   */
  async listRestaurantsRaw(
    requestParameters: ListRestaurantsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestaurantListDto>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/restaurants`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestaurantListDtoFromJSON(jsonValue));
  }

  /**
   * Retrive a list of restaurants.
   */
  async listRestaurants(
    requestParameters: ListRestaurantsRequest = {},
    initOverrides?: RequestInit,
  ): Promise<RestaurantListDto> {
    const response = await this.listRestaurantsRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
