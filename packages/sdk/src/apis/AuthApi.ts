/* tslint:disable */
/* eslint-disable */
/**
 * JeszCoChcesz API üç≤üçùüçú
 * JeszCoChcesz is an online food delivery system connecting restaurants with health-conscious users.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  DefaultResponseDto,
  DefaultResponseDtoFromJSON,
  DefaultResponseDtoToJSON,
  LoginDto,
  LoginDtoFromJSON,
  LoginDtoToJSON,
  RegisterAsPartnerDto,
  RegisterAsPartnerDtoFromJSON,
  RegisterAsPartnerDtoToJSON,
  RegisterAsUserDto,
  RegisterAsUserDtoFromJSON,
  RegisterAsUserDtoToJSON,
  ValidationErrorDto,
  ValidationErrorDtoFromJSON,
  ValidationErrorDtoToJSON,
} from '../models';

export interface AuthApiLoginRequest {
  loginDto: LoginDto;
}

export interface AuthApiRegisterAsPartnerRequest {
  registerAsPartnerDto: RegisterAsPartnerDto;
}

export interface AuthApiRegisterAsUserRequest {
  registerAsUserDto: RegisterAsUserDto;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI {
  /**
   * Store auth token in cookies.
   */
  async loginRaw(
    requestParameters: AuthApiLoginRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.loginDto === null || requestParameters.loginDto === undefined) {
      throw new runtime.RequiredError(
        'loginDto',
        'Required parameter requestParameters.loginDto was null or undefined when calling login.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/auth/login`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: LoginDtoToJSON(requestParameters.loginDto),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Store auth token in cookies.
   */
  async login(requestParameters: AuthApiLoginRequest, initOverrides?: RequestInit): Promise<void> {
    await this.loginRaw(requestParameters, initOverrides);
  }

  /**
   * Remove auth token from cookies.
   */
  async logoutRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/auth/logout`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Remove auth token from cookies.
   */
  async logout(initOverrides?: RequestInit): Promise<void> {
    await this.logoutRaw(initOverrides);
  }

  /**
   * Create a new partner.
   */
  async registerAsPartnerRaw(
    requestParameters: AuthApiRegisterAsPartnerRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.registerAsPartnerDto === null || requestParameters.registerAsPartnerDto === undefined) {
      throw new runtime.RequiredError(
        'registerAsPartnerDto',
        'Required parameter requestParameters.registerAsPartnerDto was null or undefined when calling registerAsPartner.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/auth/register/partner`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RegisterAsPartnerDtoToJSON(requestParameters.registerAsPartnerDto),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create a new partner.
   */
  async registerAsPartner(
    requestParameters: AuthApiRegisterAsPartnerRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.registerAsPartnerRaw(requestParameters, initOverrides);
  }

  /**
   * Create a new user.
   */
  async registerAsUserRaw(
    requestParameters: AuthApiRegisterAsUserRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.registerAsUserDto === null || requestParameters.registerAsUserDto === undefined) {
      throw new runtime.RequiredError(
        'registerAsUserDto',
        'Required parameter requestParameters.registerAsUserDto was null or undefined when calling registerAsUser.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/auth/register/user`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RegisterAsUserDtoToJSON(requestParameters.registerAsUserDto),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create a new user.
   */
  async registerAsUser(requestParameters: AuthApiRegisterAsUserRequest, initOverrides?: RequestInit): Promise<void> {
    await this.registerAsUserRaw(requestParameters, initOverrides);
  }
}
