/* tslint:disable */
/* eslint-disable */
/**
 * App example
 * The app API description
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  ArticleDto,
  ArticleDtoFromJSON,
  ArticleDtoToJSON,
  ArticleListDto,
  ArticleListDtoFromJSON,
  ArticleListDtoToJSON,
  CreateArticleDto,
  CreateArticleDtoFromJSON,
  CreateArticleDtoToJSON,
  DefaultResponseDto,
  DefaultResponseDtoFromJSON,
  DefaultResponseDtoToJSON,
  ValidationErrorDto,
  ValidationErrorDtoFromJSON,
  ValidationErrorDtoToJSON,
} from '../models';

export interface CreateRequest {
  createArticleDto: CreateArticleDto;
}

export interface FindByIdRequest {
  id: string;
}

/**
 *
 */
export class ArticlesApi extends runtime.BaseAPI {
  /**
   * Create article.
   */
  async createRaw(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<ArticleDto>> {
    if (requestParameters.createArticleDto === null || requestParameters.createArticleDto === undefined) {
      throw new runtime.RequiredError(
        'createArticleDto',
        'Required parameter requestParameters.createArticleDto was null or undefined when calling create.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/articles`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateArticleDtoToJSON(requestParameters.createArticleDto),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ArticleDtoFromJSON(jsonValue));
  }

  /**
   * Create article.
   */
  async create(requestParameters: CreateRequest, initOverrides?: RequestInit): Promise<ArticleDto> {
    const response = await this.createRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Read article by id.
   */
  async findByIdRaw(
    requestParameters: FindByIdRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<ArticleDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling findById.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/articles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ArticleDtoFromJSON(jsonValue));
  }

  /**
   * Read article by id.
   */
  async findById(requestParameters: FindByIdRequest, initOverrides?: RequestInit): Promise<ArticleDto> {
    const response = await this.findByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List articles.
   */
  async listRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArticleListDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/articles`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ArticleListDtoFromJSON(jsonValue));
  }

  /**
   * List articles.
   */
  async list(initOverrides?: RequestInit): Promise<ArticleListDto> {
    const response = await this.listRaw(initOverrides);
    return await response.value();
  }
}
