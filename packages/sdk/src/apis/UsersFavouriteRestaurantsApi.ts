/* tslint:disable */
/* eslint-disable */
/**
 * JeszCoChcesz API üç≤üçùüçú
 * JeszCoChcesz is an online food delivery system connecting restaurants with health-conscious users.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  DefaultResponseDto,
  DefaultResponseDtoFromJSON,
  DefaultResponseDtoToJSON,
  FavouriteRestaurantDto,
  FavouriteRestaurantDtoFromJSON,
  FavouriteRestaurantDtoToJSON,
  FavouriteRestaurantListDto,
  FavouriteRestaurantListDtoFromJSON,
  FavouriteRestaurantListDtoToJSON,
  ValidationErrorDto,
  ValidationErrorDtoFromJSON,
  ValidationErrorDtoToJSON,
} from '../models';

export interface UsersFavouriteRestaurantsApiAddRequest {
  id: string;
}

export interface UsersFavouriteRestaurantsApiListRequest {
  page?: number;
  limit?: number;
}

export interface UsersFavouriteRestaurantsApiRemoveRequest {
  id: string;
}

/**
 *
 */
export class UsersFavouriteRestaurantsApi extends runtime.BaseAPI {
  /**
   * Update an existing restaurant.
   */
  async addRaw(
    requestParameters: UsersFavouriteRestaurantsApiAddRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<FavouriteRestaurantDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling add.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/users/favourite/restaurants/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FavouriteRestaurantDtoFromJSON(jsonValue));
  }

  /**
   * Update an existing restaurant.
   */
  async add(
    requestParameters: UsersFavouriteRestaurantsApiAddRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<FavouriteRestaurantDto> {
    const response = await this.addRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Retrieve a list of restaurants.
   */
  async listRaw(
    requestParameters: UsersFavouriteRestaurantsApiListRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<FavouriteRestaurantListDto>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/users/favourite/restaurants`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FavouriteRestaurantListDtoFromJSON(jsonValue));
  }

  /**
   * Retrieve a list of restaurants.
   */
  async list(
    requestParameters: UsersFavouriteRestaurantsApiListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<FavouriteRestaurantListDto> {
    const response = await this.listRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete a restaurant.
   */
  async removeRaw(
    requestParameters: UsersFavouriteRestaurantsApiRemoveRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling remove.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/users/favourite/restaurants/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a restaurant.
   */
  async remove(
    requestParameters: UsersFavouriteRestaurantsApiRemoveRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.removeRaw(requestParameters, initOverrides);
  }
}
