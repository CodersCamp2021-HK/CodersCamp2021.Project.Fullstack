/* tslint:disable */
/* eslint-disable */
/**
 * App example
 * The app API description
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { AllergensEnum, AllergensEnumFromJSON, AllergensEnumFromJSONTyped, AllergensEnumToJSON } from './AllergensEnum';
import { DishTagsEnum, DishTagsEnumFromJSON, DishTagsEnumFromJSONTyped, DishTagsEnumToJSON } from './DishTagsEnum';
import { IngredientDto, IngredientDtoFromJSON, IngredientDtoFromJSONTyped, IngredientDtoToJSON } from './IngredientDto';
import { MealTypeEnum, MealTypeEnumFromJSON, MealTypeEnumFromJSONTyped, MealTypeEnumToJSON } from './MealTypeEnum';
import {
  NutritionalValueDto,
  NutritionalValueDtoFromJSON,
  NutritionalValueDtoFromJSONTyped,
  NutritionalValueDtoToJSON,
} from './NutritionalValueDto';

/**
 *
 * @export
 * @interface UpdateDishDto
 */
export interface UpdateDishDto {
  /**
   *
   * @type {string}
   * @memberof UpdateDishDto
   */
  name: string;
  /**
   *
   * @type {Array<MealTypeEnum>}
   * @memberof UpdateDishDto
   */
  mealType?: Array<MealTypeEnum>;
  /**
   *
   * @type {string}
   * @memberof UpdateDishDto
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof UpdateDishDto
   */
  price: number;
  /**
   *
   * @type {Array<DishTagsEnum>}
   * @memberof UpdateDishDto
   */
  tags?: Array<DishTagsEnum>;
  /**
   *
   * @type {Array<IngredientDto>}
   * @memberof UpdateDishDto
   */
  ingredients?: Array<IngredientDto>;
  /**
   *
   * @type {Array<AllergensEnum>}
   * @memberof UpdateDishDto
   */
  allergens?: Array<AllergensEnum>;
  /**
   *
   * @type {number}
   * @memberof UpdateDishDto
   */
  portionWeight: number;
  /**
   *
   * @type {NutritionalValueDto}
   * @memberof UpdateDishDto
   */
  calories: NutritionalValueDto;
  /**
   *
   * @type {NutritionalValueDto}
   * @memberof UpdateDishDto
   */
  fats: NutritionalValueDto;
  /**
   *
   * @type {NutritionalValueDto}
   * @memberof UpdateDishDto
   */
  proteins: NutritionalValueDto;
  /**
   *
   * @type {NutritionalValueDto}
   * @memberof UpdateDishDto
   */
  carbohydrates: NutritionalValueDto;
}

export function UpdateDishDtoFromJSON(json: any): UpdateDishDto {
  return UpdateDishDtoFromJSONTyped(json, false);
}

export function UpdateDishDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateDishDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    mealType: !exists(json, 'mealType') ? undefined : (json['mealType'] as Array<any>).map(MealTypeEnumFromJSON),
    description: !exists(json, 'description') ? undefined : json['description'],
    price: json['price'],
    tags: !exists(json, 'tags') ? undefined : (json['tags'] as Array<any>).map(DishTagsEnumFromJSON),
    ingredients: !exists(json, 'ingredients')
      ? undefined
      : (json['ingredients'] as Array<any>).map(IngredientDtoFromJSON),
    allergens: !exists(json, 'allergens') ? undefined : (json['allergens'] as Array<any>).map(AllergensEnumFromJSON),
    portionWeight: json['portionWeight'],
    calories: NutritionalValueDtoFromJSON(json['calories']),
    fats: NutritionalValueDtoFromJSON(json['fats']),
    proteins: NutritionalValueDtoFromJSON(json['proteins']),
    carbohydrates: NutritionalValueDtoFromJSON(json['carbohydrates']),
  };
}

export function UpdateDishDtoToJSON(value?: UpdateDishDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    mealType: value.mealType === undefined ? undefined : (value.mealType as Array<any>).map(MealTypeEnumToJSON),
    description: value.description,
    price: value.price,
    tags: value.tags === undefined ? undefined : (value.tags as Array<any>).map(DishTagsEnumToJSON),
    ingredients:
      value.ingredients === undefined ? undefined : (value.ingredients as Array<any>).map(IngredientDtoToJSON),
    allergens: value.allergens === undefined ? undefined : (value.allergens as Array<any>).map(AllergensEnumToJSON),
    portionWeight: value.portionWeight,
    calories: NutritionalValueDtoToJSON(value.calories),
    fats: NutritionalValueDtoToJSON(value.fats),
    proteins: NutritionalValueDtoToJSON(value.proteins),
    carbohydrates: NutritionalValueDtoToJSON(value.carbohydrates),
  };
}
